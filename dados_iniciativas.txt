class Eixo(models.Model): # objetivos estratégicos do governo
    eixo_estrategico = models.CharField(_("Nome do Eixo"), max_length=255)
    eixo_estrategico_cd = models.CharField(_("Código do Eixo"), max_length=10, validators=[RegexValidator(r'^\d{1,10}$')], unique=True)
    descricao = models.TextField(verbose_name = _("Descrição"))
class Fontes(models.Model): # fontes das iniciativas
    fonte_cd = models.CharField(_("Código da Fonte"), max_length=10, validators=[RegexValidator(r'^\d{1,10}$')], unique=True)
    fonte_nm = models.CharField(_("Nome da Fonte"), max_length=255)
class Produto(models.Model): # produtos gerados pelas iniciativas
    produto_nm = models.CharField(_("Nome do Produto"), max_length=255)
    produto_cd = models.CharField(_("Código do Produto"), max_length=10, validators=[RegexValidator(r'^\d{1,10}$')], unique=True)
class Programa(models.Model): # programas orçamentários das iniciativas
    eixo_estrategico = models.ForeignKey(Eixo, on_delete=models.CASCADE, verbose_name = _("Nome do Eixo"))
    programa = models.CharField(verbose_name=_("Nome do Programa"), max_length=255)
    programa_cd = models.CharField(_("Código do Programa"), max_length=10, validators=[RegexValidator(r'^\d{1,10}$')], unique=True)
    tipo = models.CharField(max_length=255, choices=tipo_programa_lista, verbose_name = _("Tipo"))
    descricao = models.TextField(verbose_name = _("Descrição"))
class Acao(models.Model): # ações orçamentários das iniciativas
    programa = models.ForeignKey(Programa, on_delete=models.CASCADE, verbose_name = _("Nome do Programa"))
    acao = models.CharField(max_length=255, verbose_name = _("Nome da Ação"), unique=True)
    acao_cd = models.CharField(max_length=10, validators=[RegexValidator(r'^\d{1,10}$')], verbose_name = _("Código da Ação"), unique=True)
    tipo = models.CharField(max_length=255, choices=tipo_acao_lista, verbose_name = _("Tipo"))
    descricao = models.TextField(verbose_name = _("Descrição"))
class Secretaria(models.Model): # secretaria responsável pela iniciativa
    secretaria = models.CharField(max_length=255, verbose_name = _("Nome da Secretaria"))
    secretaria_cd = models.CharField(max_length=10, validators=[RegexValidator(r'^\d{1,10}$')], verbose_name = _("Código da Secretaria"), unique=True)
class Orgao(models.Model): # órgão responsável pela iniciativa, no caso da Adm. Indireta
    secretaria = models.ForeignKey(Secretaria, on_delete=models.CASCADE, verbose_name = _("Nome da Secretaria"))
    orgao = models.CharField(max_length=255, verbose_name = _("Nome do Órgão"))
    orgao_cd = models.CharField(max_length=10, validators=[RegexValidator(r'^\d{1,10}$')], verbose_name = _("Código do Órgão"), unique=True)
class Municipio(models.Model): # municípios alcançados pela iniciativa
    nome = models.CharField(max_length=100, verbose_name = _("Nome do Município"))
    codigo = models.CharField(max_length=7, verbose_name = _("Código do Município"))
    history = HistoricalRecords()
class Responsavel(models.Model): # responsával pela gestão da iniciativa na secretaria
    secretaria = models.ForeignKey(Secretaria, on_delete=models.CASCADE, verbose_name = _("Nome da Secretaria"))
    orgao = models.ForeignKey(Orgao, on_delete=models.CASCADE, blank=True, null=True, verbose_name = _("Nome do Órgão"))
    nome = models.CharField(max_length=255, verbose_name = _("Nome do(a) Responsável"))
class Iniciativa(models.Model): # dados da iniciativa
    acao = models.ForeignKey(Acao, on_delete=models.CASCADE, verbose_name = _("Nome da Ação"))
    secretaria = models.ForeignKey(Secretaria, on_delete=models.CASCADE, verbose_name = _("Nome da Secretaria"))
    orgao = models.ForeignKey(Orgao, on_delete=models.CASCADE, blank=True, null=True, verbose_name = _("Nome do Órgão"))
    responsavel = models.ForeignKey(Responsavel, on_delete=models.CASCADE, verbose_name = _("Nome do(a) Responsável"))
    gestor = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, verbose_name = _("Nome do(a) Gestor(a)"))
    iniciativa = models.TextField(default='teste', verbose_name = _("Nome da Iniciativa"))
    iniciativa_cd = models.CharField(max_length=4, verbose_name = _("Código da Iniciativa"), unique=True)
    tipo = models.CharField(max_length=255, choices=tipo_lista, verbose_name = _("Tipo"))    
    tema = models.TextField(verbose_name = _("Tema"))
    descricao = models.TextField(verbose_name = _("Descrição"))
    populacao = models.IntegerField(verbose_name = _("População"))
    municipio = models.ManyToManyField(Municipio, default='Recife', verbose_name = _("Nome do Município"))
class Monitoramento(models.Model): # dados do monitoramento da iniciativa
    iniciativa = models.ForeignKey(Iniciativa, on_delete=models.CASCADE, verbose_name = _("Nome da Iniciativa"))
    status = models.CharField(max_length=255, choices=status_lista, verbose_name = _("Status"))
    data_inicio_planejado = models.DateField(default=date.today, verbose_name = _("Data Planejada - Início"))
    data_inicio_atualizado = models.DateField(blank=True, null=True, verbose_name = _("Data Atualizada - Início"))
    data_termino_planejado = models.DateField(default=date.today, verbose_name = _("Data Planejada - Término"))
    data_termino_atualizado = models.DateField(blank=True, null=True, verbose_name = _("Data Atualizada - Término"))
    execucao_fisica = models.DecimalField(
        max_digits=3, decimal_places=1, default=Decimal(0), validators=PERCENTAGE_VALIDATOR, verbose_name = _("Execução Física")
        )
    observacao = models.TextField(verbose_name = _("Observação"))
    link_fotos = models.URLField(max_length=500, verbose_name = _("Link de Fotos"))
    link_repositorio = models.URLField(max_length=500, verbose_name = _("Link do Repositório"))    
class Etapa(models.Model): # dados das etapas da iniciativa, quando cabível
    iniciativa = models.ForeignKey(Iniciativa, on_delete=models.CASCADE, verbose_name = _("Nome da Iniciativa"))
    responsavel = models.ForeignKey(Responsavel, on_delete=models.CASCADE, verbose_name = _("Nome do(a) Responsável"))
    etapa = models.TextField(default='teste', verbose_name = _("Nome da Etapa"))
    etapa_cd = models.CharField(max_length=4, verbose_name = _("Código da Etapa"), unique=True)
    tipo = models.CharField(max_length=255, choices=tipo_lista,verbose_name = _("Tipo"))    
    tema = models.TextField(verbose_name = _("Tema"))
    descricao = models.TextField(verbose_name = _("Descrição"))
    populacao = models.IntegerField(verbose_name = _("População"))
    municipio = models.ManyToManyField(Municipio, default='Recife', verbose_name = _("Nome do Município"))
    history = HistoricalRecords()
class MonitoramentoEtapa(models.Model): # monitoramento das etapas, quando cabível
    etapa = models.ForeignKey(Etapa, on_delete=models.CASCADE, verbose_name = _("Nome da Etapa"))
    status = models.CharField(max_length=255, choices=status_lista, verbose_name = _("Status"))
    data_inicio_planejado = models.DateField(default=date.today, verbose_name = _("Data Planejada - Início"))
    data_inicio_atualizado = models.DateField(blank=True, null=True, verbose_name = _("Data Atualizada - Início"))
    data_termino_planejado = models.DateField(default=date.today, verbose_name = _("Data Planejada - Término"))
    data_termino_atualizado = models.DateField(blank=True, null=True, verbose_name = _("Data Atualizada - Término"))
    execucao_fisica = models.DecimalField(
        max_digits=3, decimal_places=1, default=Decimal(0), validators=PERCENTAGE_VALIDATOR, verbose_name = _("Execução Física")
        )
    observacao = models.TextField(verbose_name = _("Observação"))
    link_fotos = models.URLField(max_length=500, verbose_name = _("Link de Fotos"))
    link_repositorio = models.URLField(max_length=500, verbose_name = _("Link de Repositório"))    